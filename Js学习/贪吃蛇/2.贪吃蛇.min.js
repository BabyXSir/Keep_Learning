let snake = [20 + 2, 20 + 3, 20 + 4,], toDirection = 'right', direction = 'right', start = false, board = document.getElementsByClassName("board")[0], keyMap = { 119: 'up', 115: 'down', 97: 'left', 100: 'right' }, food = 130, gameRunner;
board.innerHTML = snake.reduce((res, item) => res + `<div class="unit" style="left:${(item - 1) % 20 * 20}px;top:${Math.floor((item - 1) / 20) * 20}px;"></div>`, '')// 初始化渲染
document.onkeypress = e => start ? (toDirection = keyMap[e.keyCode]) : (runGame())// 键盘事件
function createFood() { snake.indexOf(food = Math.floor(20 * 20 * Math.random())) == -1 ? true : createFood() }// 创建新果实
function runGame() {// 启动游戏
  snake = [22, 23, 24,], start = true, direction = 'right', toDirection = 'right';// 初始化信息
  board.innerHTML = snake.reduce((res, item) => res + `<div class="unit" style="left:${(item - 1) % 20 * 20}px;top:${Math.floor((item - 1) / 20) * 20}px;"></div>`, '')// 初始化渲染
  gameRunner = setInterval(() => {
    direction = { 'up': 'down', 'down': 'up', 'left': 'right', 'right': 'left', }[direction] == toDirection ? direction : toDirection
    let nextUnit = snake[snake.length - 1] + { up: -20, down: 20, left: -1, right: 1 }[direction]
    if ((snake[snake.length - 1] % 20 == 0 && direction == 'right') || (snake[snake.length - 1] % 20 == 1 && direction == 'left') || (snake[snake.length - 1] / 20 < 1 && direction == 'up') || (snake[snake.length - 1] / 20 > 19 && direction == 'down') || snake.indexOf(nextUnit) != -1) { // 判断输没
      clearInterval(gameRunner);
      start = false;
      return alert("GOOD GAME!");// 游戏结束
    }
    nextUnit == food ? (createFood()) : (snake.shift());// 判断是否吃到果实
    snake.push(snake[snake.length - 1] + { up: -20, down: 20, left: -1, right: 1 }[direction]);// 添加新坐标
    board.innerHTML = [food, ...snake].reduce((res, item) => res + `<div class="unit" style="left:${(item - 1) % 20 * 20}px;top:${Math.floor((item - 1) / 20) * 20}px;"></div>`, '')// 渲染
  }, 100)
}